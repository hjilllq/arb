name: CI

on:
  workflow_dispatch:
  pull_request:
    branches: ["main"]
  push:
    branches: ["restore-from-codex"]

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"
          cache: "pip"
          cache-dependency-path: |
            requirements.txt
            mypy.ini
            .ruff.toml

      - name: Upgrade pip tooling
        run: python -m pip install --upgrade pip setuptools wheel

      # ВАЖНО: никаких CUDA-пакетов. Если торч прилип из кэша — сносим.
      - name: Ensure no CUDA torch in env
        run: |
          pip uninstall -y torch torchvision torchaudio triton || true

      - name: Install project dependencies
        run: pip install -r requirements.txt

      - name: Install dev tools (tests, lint, types)
        run: pip install pytest pytest-asyncio ruff mypy

      - name: Show key package versions
        run: |
          python -V
          python - <<'PY'
import importlib
def ver(name):
    try:
        m = importlib.import_module(name)
        print(f"{name} =", getattr(m, "__version__", "n/a"))
    except Exception:
        print(f"{name} = not installed")
for pkg in ["sklearn","httpx","ruff","mypy","pytest"]:
    ver(pkg)
try:
    import torch
    print("torch =", getattr(torch, "__version__", "n/a"))
except Exception:
    print("torch = not installed")
PY

      - name: Lint (ruff)
        run: ruff check . --output-format=github

      - name: Type check (mypy)
        run: mypy --config-file mypy.ini .

      - name: Run tests
        env:
          CUDA_VISIBLE_DEVICES: ""  # на раннере GPU нет
        run: pytest -q
